

unless mentioned, all values are little endian. a "byte" is 8 bits, a "half(word)" is 16 bits, and a "word" is 32 bits
all hexadecimal numbers will be prefixed with $, and all ranges are inclusive




note: there are TWO dumps of this game in goodgba..... not sure about the origins of them

"Higurashi no Naku Koro ni (PD).gba", CRC32 3C2F7D28, SHA-1 735FF1AE996AACF27C5E16C9E55652EC0D03F2E1
"Higurashi no Naku Koro ni (PD) [a1].gba", CRC32 03A81C68, SHA-1 7AD95333F2C62031BB2FB7C86065BC094A715E05

dump 1 has a bad header, the nintendo logo and complement check are 0. a real gba would not run it
dump 2's header is good

following header stuff isn't really "wrong", but may be interesting
both dumps are internally named "HIGURASHIGBA"
dump 1's game code is "HGRS" (short for "higurashi"), dump 2's is "AISJ" (game software, code "IS", japan)
dump 1's maker code is "IC" (inside-cap), dump 2's is "DJ" (?)
dump 1 is marked as version 1, dump 2 is version 0

the engine code ($80000c0-$8011f0b) is identical in both, but the script is totally different

dump 1 is protected, and requires a button input passcode to play
dump 2 is not protected - the protection code still exists but is never called
both seem to be full games, with the first four arcs

kill the emulator detection by patching $8007150 with mov r0,#0; bx lr (bytes $00,$20,$70,$47)
kill the rom verification by patching $800b368 with the same code

since the engine code is the same, and the entire script needs to be reconstructed to translate it anyway, it should be easy to make a patch that works on either dump- just repair the header, kill the protection, and rewrite the script data






--------- sram info -----------
$0000-$000f: same as $a0-$af of rom header
$0010-$0013: same as sram verification key in script header
$0014-$0017: absolute location of font offset list
$0018-$001b: absolute location of file offset list
$001c-$001f: engine's sram verification key ($00010009)
^^^^ if any of these are wrong on boot, the entire sram will be cleared and reinitialized ^^^^

$0020-$011f: script global variable space

$0120-$012b: game configuration

$01fc-$01ff: current pseudo-random number (initialized to seed in script header)

save slots start at $0200, and each one is $0800 bytes long
there are 9 slots, but the last one is reserved for autosaves


per save file:
$000-$0ff: save-local variables
$100-$1ff: script call stack
$200-$23f: ??? (copied from $3002388+)
$240-$33f: backlog buffer
$340-$3bf: backlog page start coordinates
$3c0-$3e1: misc game state vars
$3e2-$3f1: text palette
$3f4-$3f7: adv mode window pointer
$3f8-$3fb: cursor pointer
$3fc-$563: onscreen text buffer
$564-$567: background image pointer
$568-$5e7: character portrait table
$5e8-$5eb: ???? (copied from $3002d98)





-------- script info ---------

there may be $200 script variables

variables $000-$0ff are save-specific signed bytes, from $3002288-$3002387
variables $100-$1ff are global unsigned bytes, from $0020-$011f in sram

$200-$2ff indicate indirect access, for example:
if variable $20 has a value of $40,
and variable $10 has a value of $20,
trying to access variable $210 will retrieve $20, then the value in variable $20 ($40) as the final value

avoid writing to variables 0-4, the engine uses them
variable 0 is generally used as an error indicator/return value

it is possible to access two contiguous variables and interpret their contents as a little-endian 16 bit value, commands which do this will be marked









the script header starts at $8011f0c, and all offsets are relative to here unless otherwise specified

script header format:
word - offset to label offset list
word - offset to font pattern data
word - offset to file offset list
word - sram verification key
word - initial prng seed
word - offset to $ffffffff-terminated useless table
word - offset to instrument list
word - offset to system message offset list
word - offset to unknown sound-related data






the first offset in the label list is the starting point of the script

script codes:
$00 - wait for user input, then clear all text onscreen
$0d - handle script command
$0e - wait for user input
$0f - newline
everything else is the char to print? seems like custom encoding

script commands are done using a massive code offset table at $8009cd0-$8009e75
it means there could be $d3 commands, but a lot of them are no-ops (offset $02aa)
only the meaningful ones will be detailed here

$00 - delete autosave and reset
$01 - delete autosave and define reset label here
$02 - delete all saved games
$03 - allow/disallow skipping
    byte - zero to allow, nonzero to disallow
$04 - set game title
    null-terminated string - title
$05 - show load game menu

$06 - return nonzero if rom checksum fails, 0 if not
$07 - return 1 if running on emulator, 0 if not
$08 - wait for keypress and return the pressed key
    (0=a, 1=b, 2=sel, 3=sta, 4=right, 5=left, 6=up, 7=down, 8=r, 9=l)
    byte -  0: do not show cursor
            1: show normal cursor
            2: show end-of-page cursor
$09 - generate 32-bit protection key in variables 1-4

$0a - enable/disable backlog
    byte - nonzero to enable, zero to disable
$0b - enable/disable pause menu
    byte - nonzero to enable, zero to disable



$10 - set background and clear all character portraits
    half - file id
$11 - set background and clear all character portraits
    byte - variable of 16-bit file id
$12 - set background and clear all character portraits
    half - solid color, in gba palette entry format

$13 - load character portrait
    byte -  bits 6-7: parameter 1 type
            bits 4-5: parameter 2 type
                        0: none, use 0
                        1: absolute byte value
                        2: absolute half value
                        3: byte reference to byte variable value
            bits 0-2: foreground layer
    half - file id of image. $ffff means none
    half - file id of transparency. $ffff means image is 100% opaque
    parameter 1 - x position (0 is centered, negative moves left, positive moves right)
    parameter 2 - y position (0 means the bottom of the image is at the bottom of the screen, negative moves up, positive moves down)
$14 - load character portrait
    byte -  bits 6-7: parameter 1 type
            bits 4-5: parameter 2 type
                        0: none, use 0
                        1: absolute byte value
                        2: absolute half value
                        3: byte reference to byte variable value
            bits 0-2: foreground layer
    byte - variable of 16-bit file id of image. $ffff means none
    byte - variable of 16-bit file id of transparency. $ffff means image is 100% opaque
    parameter 1 - x position (0 is centered, negative moves left, positive moves right)
    parameter 2 - y position (0 means the bottom of the image is at the bottom of the screen, negative moves up, positive moves down)
$15 - clear character portrait
    byte - layer
$16 - clear all character portraits

$17 - hide text and repaint screen
    byte - effect id
    byte - effect time

$18 - ??? set $3002d98
    byte -  0: value is 0
            1: value is $18000
            2: value is $58000 | next halfword
    half, ONLY IF previous byte was 2
$19 - set character portrait positioning base
    byte - 0 = left, 1 = center

$1a - hide character portrait
    byte - layer
$1b - unhide character portrait
    byte - layer

$1c - hide text and repaint screen with mask(?) file
    byte - effect id
    byte - effect time
    half - mask file id
$1d - hide text and repaint screen with mask(?) file
    byte - effect id
    byte - effect time
    byte - variable of 16-bit mask file id

$1e - reposition character portrait
    byte -  bit 7: zero to add to coords, nonzero to set
            bits 0-2: layer
    half - x position add/set value: if < $8000, the lower 15 bits are the signed value, otherwise the lower 8 bits are a variable reference
    half - y position add/set value: if < $8000, the lower 15 bits are the signed value, otherwise the lower 8 bits are a variable reference
$1f - swap character portraits
    byte -  bit 7: swap positions
            bit 6: swap images
            bits 3-5: layer 1
            bits 0-2: layer 2



NOTE: all wait commands return 1 if ended by user input, or 0 if the real end-condition actually occurred
$20 - frame wait, unless skip mode enabled or button press occurs
    byte - frames to wait / 2
$21 - frame wait, unless skip mode enabled
    byte - frames to wait / 2
$22 - unskippable frame wait
    byte - frames to wait / 2

$23 - enable gba timer 3 irq, and reset timer counter to 0
    timer counter is clocked at (16780000 / 1024 / ($10000-$ff5c)) = 99.919 Hz, which is about 10ms/clock
$24 - timer wait, unless skip mode enabled or button press occurs
    half - target timer counter value
$25 - timer wait, unless skip mode enabled
    half - target timer counter value
$26 - unskippable timer wait
    half - target timer counter value

$27 - set delay in frames after repaint
    byte - value
$28 - set text display background fade speed
    byte - frames in between each fade level (0 for instant transition)
$29 - override user's text speed
    byte - new text speed ($ff to go back to normal)
$2a - make text progress automatically
    byte - frames to wait after text done (0 to disable)
$2b - wait for a variety of conditions to be false
    byte - condition to check
            0: wait until no music playing
            1: wait until no sound effect playing on channel 1
            2: wait until no sound effect playing on channel 2
            3: wait until no sample playing on fifo b
            4: wait until special bg effects are done
    byte - wait mode
            0: allow skipping and button presses to interrupt
            1: only allow skipping to interrupt
            2: unskippable



$30 - play music
    half - file id
    byte - zero for no loop, nonzero for loop
$31 - play music
    byte - variable of 16-bit file id
    byte - zero for no loop, nonzero for loop
$32 - stop music
$33 - fade out music
$34 - fade out music, and wait
$35 - play sample on fifo b
    half - file id
    byte -  0: do not loop
            1: loop
            2: skippable wait until sample finishes
            3: button-end-able wait until sample finishes
            4: unskippable
$36 - play sample on fifo b
    byte - variable of 16-bit file id
    byte -  0: do not loop
            1: loop
            2: skippable wait until sample finishes
            3: button-end-able wait until sample finishes
            4: unskippable
$37 - disable sound fifo b
$39 - play a movie
    half - file id
    byte - zero for no loop, nonzero for loop
$3a - play a movie
    byte - variable of 16-bit file id
    byte - zero for no loop, nonzero for loop
$3b - play sound effect
    half - file id
    byte -  bits 7-4: channel (0 = whichever is available, otherwise the number)
            bits 3-0:
                0: play sample once
                1: loop sample
                2: skippable wait until sample finishes
                3: button-end-able wait until sample finishes
                4: unskippable
$3c - play sound effect
    byte - variable of 16-bit file id
    byte -  bits 7-4: channel (0 = whichever is available, otherwise the number)
            bits 3-0:
                0: play sample once
                1: loop sample
                2: skippable wait until sample finishes
                3: button-end-able wait until sample finishes
                4: unskippable
$3d - stop sfx channel(s)
    byte - 0 for both, 1 for channel 1, 2 for channel 2
$3e - return 1 if music is playing, else 0
$3f - return 1 if true, else 0
    byte -  0: sound fifo b enabled
            1: sfx playing on channel 1
            2: sfx playing on channel 2



$41 - x-wise screen wave
    byte - time in frames
    byte - wave speed
$42 - y-wise screen wave
    byte - time in frames
    byte - wave speed

$43 - show text layer
$44 - hide text layer
$45 - set text color
    byte - color index (note: the colors below are the defaults)
        0: black
        1: white
        2: red
        3: green
        4: blue
        5: yellow
        6: magenta
        7: cyan
$46 - set text color palette
    byte - color index
    half - color in gba palette format

$47 - set game mode
    0: nvl
    1: nvl with no background fades on new text, and outlined instead of shadowed text
    2: adv
$48 - (adv mode only) set window
    half - file id

$49 - clear text layer

$4a - screen shake
    byte - x-wise amplitude
    byte - y-wise amplitude
    byte - time in "shake frames"
    byte - frames per shake frame

$4b - set cursor icon
    half - file id

$4c - repaint and enable background

$4d - ??? init special effect?
    half - file id
    half - file id

$4e - ???

$4f - return 1 if special effect in progress, otherwise 0



$50 - constant -> variable transfer
    half - variable number
    byte - value
$51 - 16-bit constant -> variable transfer
    half - variable number
    half - value
$52 - add constant to variable
    half - variable number
    byte - value
$53 - increment variable
    (this command will do nothing if incrementing would result in signed overflow)
    half - destination variable
$54 - decrement variable
    (this command will do nothing if decrementing would result in signed overflow)
    half - destination variable
$55 - clear variables $000-$0ff
$56 - clear variables $100-$1ff
$57 - variable -> variable transfer
    half - destination variable
    half - source variable
$58 - generate random number
    half - destination variable
    byte - min value
    byte - max value
$59 - perform bitwise operation on variable
    half - variable of lhs
    byte - 0=and, 1=or, 2=xor, 3=left shift, 4=right shift
    byte - rhs
$5a - negate variable
    half - variable number
$5b - ?????? whatever this is for, it accesses the useless table in the script header, so can't be used
    half - variable number
$5c - add v2 to v1
    half - variable number 1
    half - variable number 2
$5d - subtract v2 from v1
    half - variable number 1
    half - variable number 2
$5e - perform bitwise operation on v1
    half - variable of lhs
    byte - 0=and, 1=or, 2=xor, 3=left shift, 4=right shift
    half - variable of rhs
$5f - generate random number
    half - destination variable
    half - variable of min value
    half - variable of max value

$70 - print 8-bit variable value
    half - variable id
$71 - print 16-bit variable value
    half - variable id
$72 - print 8-bit variable value in hexadecimal
    half - variable id
$73 - print 16-bit variable value in hexadecimal
    half - variable id


$80 - show textual selection menu, and return selected choice (max 8 choices)
    string - each option is 0-separated, list is ended with double-0

$81 - goto
    half - if < $8000, label id, otherwise lower 15 bits is a signed distance from the next command
$82 - conditionally goto
    comparison data - see comparison reference
    half - if < $8000, label id, otherwise lower 15 bits is a signed distance from the next command

$83 - gosub (can be nested up to 64 times)
    half - if < $8000, label id, otherwise lower 15 bits is a signed distance from the next command
$84 - conditionally gosub
    comparison data - see comparison reference
    half - if < $8000, label id, otherwise lower 15 bits is a signed distance from the next command

$85 - return from gosub

$87 - goto based on jump table
        (this command will do nothing if the variable value is greater than the jump table size)
    half - variable id of jump table index
    byte - entries in following jump table
    xx halfs - if < $8000, label id, otherwise lower 15 bits is a signed distance from the next command

$88 - gosub based on jump table
        (this command will do nothing if the variable value is greater than the jump table size)
    half - variable id of jump table index
    byte - entries in following jump table
    xx halfs - if < $8000, label id, otherwise lower 15 bits is a signed distance from the next command

$8f - conditionally return from gosub
    comparison data - see comparison reference


$90 - clear graphical menu
$91 - return graphical menu selection (or 0 if error? with errorcode in variable 1?)
$92 - add graphical menu option
    byte - option id
    byte - x position
    byte - y position
    byte - width
    byte - height
$93 - link graphical menu options vertically
    byte - length of list
    xx bytes - list of options, from top to bottom
$94 - link graphical menu options horizontally
    byte - length of list
    xx bytes - list of options, from left to right
$95 - disallow graphical menu option
    byte - option id
$96 - set default graphical menu option
    half - if < $8000, variable number, otherwise lower 8 bits are signed value

$97 - ???? set $3001e9c+
    4 bytes - values

$99 - ???? set pointer at array $3002990
    byte - array index
    half - file id


$a0 - fill bitmap buffer with image
    byte - buffer id
    half - file id
$a1 - fill bitmap buffer with image
    byte - buffer id
    half - variable of 16-bit file id
$a2 - fill bitmap buffer with color
    byte - buffer id
    half - color in gba palette format

$a3 - ???
    8 bytes - values

$a4 - ???
    3 bytes - values


$c0 - hard reset back to bios
$c1 - enter sleep mode (bugged, don't use)


$d0 - ??

$d1 - ??

$d2 - hide text and repaint screen with effect parameter
    byte - effect id
    byte - effect time
    byte - effect parameter



SCRIPT COMPARISONS:
some commands allow you to act depending on if a comparison of two values evaluates as true. here is the format of the comparison data:
half - upper 4 bits, comparison type:
            0: lhs == rhs
            1: lhs != rhs
            2: lhs < rhs
            3: lhs <= rhs
            4: lhs > rhs
            5: lhs >= rhs
            6: test bit rhs of lhs, true if clear
            7: test bit rhs of lhs, true if set
       lower 12 bits, variable of lhs
half - if < $8000, variable number of rhs, otherwise, lower 8 bits are the actual value of rhs






------------- video info -----------

the entire game runs in full-color bitmap mode, and aside from the ADV window and text, which are on the sprite layer, EVERYTHING is drawn onto the bitmap

no script commands actually draw onto the bitmap, everything is buffered, and only repaint commands will actually rewrite the bitmap in the vram



IMAGE FORMAT:

header:
byte -  bits 4-7: ?
        bits 0-3: image type
byte - ?
byte - ?
byte - ?
byte - unsigned image width
byte - unsigned image height
byte - ?
byte - ?
and following is the image data. assume colors are in gba palette format


image types and data descriptions:
    0: raw image
        word - image size in bytes
        xxx halfs - color for each pixel
    1: 16-color mapped image
        $10 halfs - image palette
        word - image size in bytes
        for each 2 pixels:
            byte -  bits 0-3: palette entry of left pixel
                    bits 4-7: palette entry of right pixel
    2: 256-color mapped image
        $100 halfs - image palette
        word - image size in bytes
        xxx bytes - palette entry for each pixel
    9: nybble-expanded image data?
        word - image size in bytes
        for each 2 bytes:
            byte -  bits 0-3: value of both nybbles of left pixel
                    bits 4-7: value of both nybbles of right pixel
    10: raw image, copied as bytes
        word - image size in bytes
        xxx bytes - image data

the upper nybble of the first header byte seems to indicate a much more complex image format. not sure how it works yet



EFFECTS:
whenever you repaint the display, you can use an effect to make a smoother transition between the previous display and the next. here are all ids:

0: no effect, instant transition
1: same as 14
2: scroll in from top
3: scroll in from bottom
4: scroll in from left
5: scroll in from right (BUGGY, DO NOT USE)
6: downward shutter
7: upward shutter
8: rightward shutter
9: leftward shutter
10: downward curtain
11: upward curtain
12: rightward curtain
13: leftward curtain
14: basic crossfade
15: weird square-ish crossfade
16: black out display, then fade to normal
17: white out display, then fade to normal
18: fade to black, then show new
19: fade to white, then show new
20: downward wipe
21: upward wipe
22: rightward wipe
23: leftward wipe






----------- sound info ------------

the internal output sample rate is 16780000 / ($10000 - $fce2) = 21028Hz

music may use the following channels:
4 pitchable "melodic" sample channels (internally 0-3)
2 non-pitchable "percussive" sample channels (internally 4-5)
4 gb-compatible sound channels

there are two sfx-only non-pitchable sample channels

all of the above is output to sound fifo a, fifo b is only used by special commands



music timing operates on "ticks", which is based on the system vblank rate (about 59.737Hz)
timing generally works by adding a "speed" value to a running accumulator every vblank, and when it overflows past $10000, that's a tick
so, given the speed value, the formula to calculate the tick rate is 59.737 * (speed/$10000) Hz




music data header:
half - offset to music init data
half - ?
word - music tick speed
word - ?

music init data?:
$02 - end
$10-$5f - do/skip? sample channel command
$60-$7f - set gb-compatible sound register
    half - value
$80 - set gb-compatible sound panning
    half -  lower 8 bits: unused
            upper 8 bits: same as upper 8 bits of SOUNDCNT_L
$81 - set wave channel wave data
    $20 bytes - wave data
$82-$83 - set percussion samples for channel 4/5
    4 bytes - sample ids

the actual music data follows:
$00 - wait
    byte - music speed ticks
$01 - loop
$02 - loop only if enabled when song was inited
$03 - set music tick speed
    24-bit value

$10-$5f - do sample channel command
    bits 0-2: channel
    bits 3-6: command
        (note: for the sake of simplicity we'll call $10-$17 command 0)
        0: init sample
            if melodic channel:
                byte - note ($24 is middle C)
            if percussive channel:
                byte - percussion index
        1: stop sample
        2: disable volume slide and set volume
            byte - unsigned volume
        3: set melodic sample
            byte - sample id
        4: change the note, but don't restart the sample
            byte - note ($24 is middle C)
        5: disable pitch slide and detune pitch
            byte - detune value (-$80 is an octave below, $7f is an octave up)
        6: pitch slide (you can't slide outside of the detune range)
            byte - initial detune (-$80 is an octave below, $7f is an octave up)
            word - slide tick speed
        7: volume slide (trying to slide above $ff will cause distortion)
            byte - unsigned initial volume
            word - slide tick speed

$60-$7f - set gb-compatible sound register
    half - value
$80 - set gb-compatible sound panning
    half -  lower 8 bits: unused
            upper 8 bits: same as upper 8 bits of SOUNDCNT_L
$81 - set wave channel wave data
    $20 bytes - wave data
$82-$83 - set percussion samples for channel 4/5
    4 bytes - sample ids



instrument list format:
all offsets are relative to the start of the list
for each instrument:
    word - offset to sample data
    word - length of start section of sample (if 0, the entire sample is looped)
    word - length of loop section of sample (if 0, the sample does not loop)
    word - sample base rate (not sure what unit, or what note)

sample data is signed 8-bit pcm




sound effect format:
byte - encoding format?
byte - ?
word - length of audio data
xx bytes - audio data (some kind of ADPCM? silence is encoded as endless $08. sample rate is 21028 / 4 = 5257Hz)




fifo b sample format:
half - unsigned timer value (directly written to TM1CNT_L)
half - sample time in vblanks
half - unused?
sample data, signed 8-bit pcm

